% Population decoding using template matching
% The templates are generated by taking the mean activity across trials
% during the presentation of each stimulus type. Template matching compares
% the population activity in each trial to response templates of different
% stimulus type according to the formula:
%      cos theta(1..n) = A.B/(norm(A)*norm(B)) where n is the number of
%      stimulus type; A and B are population vector and template vector,
%      respectively.
% The decoded output is determined by taking the direction with the highest
% similarity to the template.
%
% Inputs
% ------
% X : 3*3 matrix with neurons along dimension 1, stimulus type along 
% dimension 2 and trials along dimension 3.
%
% Outputs
% -------
% decoded : the percentage of correctly decoded trials across all
% stimulus type

function decoded = templatematching(X)

if size(X,3) < 3
    error('Not sufficient inputs');
end

count_decoded = 0;
count_all = 0;

nOri = size(X,2); % number of stimulus type
ntrials = size(X,3); % number of trials

for iOri = 1:nOri,
    for itr = 1:ntrials,
        A = X(:,iOri,itr);
        if all(isnan(A)) == 0
            proj = nan(1,nOri);
            for jOri = 1:nOri,
                if iOri == jOri
                    % leave one out
                    B = nanmean(X(:,jOri,[1:itr-1,itr+1:ntrials]),3);
                else
                    B = nanmean(X(:,jOri,:),3);
                end
                % From vector algebra, the angle between any two vectors is
                % given by this formula
                proj(jOri) = dot(A,B)/(norm(A)*norm(B));
            end
            [~,I]=nanmax(proj);
            if I==iOri
                count_decoded = count_decoded+1;
            end
            count_all = count_all+1;
        end
    end
end

decoded=count_decoded/count_all;

end